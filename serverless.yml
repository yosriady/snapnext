# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: snapnext

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  imagesBucketName: snapnext-images

provider:
  name: aws
  runtime: nodejs6.10
  #  stage: dev
  #  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - S3:GetObject
        - S3:PutObject
        - S3:PutObjectAcl
      Resource:
      - Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - "${self:custom.imagesBucketName}/*"
  environment:
    IMAGES_BUCKET_NAME: ${self:custom.imagesBucketName}

# you can add packaging information here
package:
  individually: true
  exclude:
    - functions/**
    - yarn.lock

functions:
  downloadImage:
    handler: functions/downloadImage.handler
    events:
      - http:
          path: images
          method: post
    package:
      include:
        - functions/downloadImage.js

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
   ImagesBucket:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: ${self:custom.imagesBucketName}
       AccessControl: PublicRead
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
