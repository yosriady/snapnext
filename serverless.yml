service: serverless-pipeline

custom:
  imagesBucketName: serverless-pipeline-images
  imagesTableName: serverless-pipeline-images
  originalsFolderName: originals
  processedFolderName: processed

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  iamRoleStatements: # IAM permissions granted to all functions
    - Effect: Allow
      Action:
        - S3:GetObject
        - S3:PutObject
        - S3:PutObjectAcl
      Resource:
      - Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - "${self:custom.imagesBucketName}/*"
    - Effect: Allow
      Action:
        - rekognition:DetectFaces
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - Fn::Join:
          - ""
          - - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:"
            - "table/${self:custom.imagesTableName}"
        - Fn::Join:
          - ""
          - - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:"
            - "table/${self:custom.imagesTableName}/stream/*"
  environment:
    IMAGES_BUCKET_NAME: ${self:custom.imagesBucketName}
    IMAGES_TABLE_NAME: ${self:custom.imagesTableName}
    ORIGINAL_FOLDER_NAME: ${self:custom.originalsFolderName}
    PROCESSED_FOLDER_NAME: ${self:custom.processedFolderName}

functions:
  downloadImage:
    handler: functions/downloadImage.handler
    events:
      - http:
          path: images
          method: post
  analyzeImage:
    handler: functions/analyzeImage.handler
    events:
      - s3:
          bucket: ${self:custom.imagesBucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: originals/
  processImage:
    handler: functions/processImage.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - ImagesTable
              - StreamArn
  viewImage:
    handler: functions/viewImage.handler
    events:
      - http:
          path: images/{id}
          method: get
  viewImages:
    handler: functions/viewImages.handler
    events:
      - http:
          path: images
          method: get

resources:
 Resources:
  ImagesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: ${self:custom.imagesTableName}
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
  # ImagesBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: ${self:custom.imagesBucketName}
  #     AccessControl: PublicRead
 Outputs:
  ImagesTableArn:
    Description: ARN of the ImagesTable
    Value:
      Fn::Join:
      - ":"
      - - arn
        - aws
        - dynamodb
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - table/${self:custom.imagesTableName}

  ImagesTableStreamArn:
    Description: ARN of the ImagesTableStream
    Value:
      Fn::GetAtt:
      - ImagesTable
      - StreamArn
